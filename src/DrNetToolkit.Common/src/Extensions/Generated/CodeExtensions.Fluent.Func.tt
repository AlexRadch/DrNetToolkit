// Licensed to the "DrNet Tips&Tricks" under one or more agreements.
// The "DrNet Tips&Tricks" licenses this file to you under the MIT license.
// See the License.md file in the project root for more information.

<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
<#

#>using System;
using System.Runtime.CompilerServices;

namespace DrNetToolkit.HighPerformance.Coding;

public static partial class CodeExtensions
{
    /// <summary>
    /// Fluent styled function to call <see cref="Func{TResult}"/> in fluent styled code.
    /// </summary>
    /// <typeparam name="T">The type of <paramref name="value"/> value.</typeparam>
    /// <typeparam name="TResult">The type of the return value of the <paramref name="function"/>.</typeparam>
    /// <param name="value">The value that will be discarded.</param>
    /// <param name="function">The function that will be called.</param>
    /// <returns>The return value of <paramref name="function"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TResult Fluent<T, TResult>(this T value, Func<TResult> function)
        => function();

    /// <summary>
    /// Fluent styled function to call <see cref="Func{T, TResult}"/> in fluent styled code.
    /// </summary>
    /// <typeparam name="T">The type of <paramref name="value"/>.</typeparam>
    /// <typeparam name="TResult">The type of the return value of the <paramref name="function"/>.</typeparam>
    /// <param name="value">The value that will be passed to <paramref name="function"/>.</param>
    /// <param name="function">The function that will be called.</param>
    /// <returns>The return value of <paramref name="function"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TResult Fluent<T, TResult>(this T value, Func<T, TResult> function)
        => function(value);
<#
    foreach(int pCount in Enumerable.Range(2, 15))
    {
#>
    
    /// <summary>
    /// Fluent styled function to call <see cref="Func{<#= string.Join(", ", Enumerable.Range(1, pCount).Select(pIndex => $"T{pIndex}")) #>, TResult}"/> in fluent styled code.
    /// </summary>
<#
        foreach(int pIndex in Enumerable.Range(1, pCount))
        {
#>
    /// <typeparam name="T<#= pIndex #>">The type of <paramref name="v<#= pIndex #>"/> value.</typeparam>
<#
        }
#>
    /// <typeparam name="TResult">The type of the return value of the <paramref name="function"/>.</typeparam>
<#
        foreach(int pIndex in Enumerable.Range(1, pCount))
        {
#>
    /// <param name="v<#= pIndex #>">The value that will be passed to <paramref name="function"/> at position <#= pIndex #>.</param>
<#
        }
#>
    /// <param name="function">The function that will be called.</param>
    /// <returns>The return value of <paramref name="function"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TResult Fluent<<#= string.Join(", ", Enumerable.Range(1, pCount).Select(pIndex => $"T{pIndex}")) #>, TResult>
    (
        this <#= string.Join(", ", Enumerable.Range(1, pCount).Select(pIndex => $"T{pIndex} v{pIndex}")) #>,
        Func<<#= string.Join(", ", Enumerable.Range(1, pCount).Select(pIndex => $"T{pIndex}")) #>, TResult> function
    )
    {
        return function(<#= string.Join(", ", Enumerable.Range(1, pCount).Select(pIndex => $"v{pIndex}")) #>);
    }
<#
    }
#>
}
