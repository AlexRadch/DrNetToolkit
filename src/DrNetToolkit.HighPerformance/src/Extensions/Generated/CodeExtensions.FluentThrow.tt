// Licensed to the "DrNet Tips & Tricks" under one or more agreements.
// The "DrNet Tips & Tricks" licenses this file to you under the MIT license.
// See the License.md file in the project root for more information.

<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
<#

#>using System;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;

namespace DrNetToolkit.HighPerformance.Coding;

public static partial class CodeExtensions
{
<#
    foreach(int pCount in Enumerable.Range(0, 17))
    {
        if (pCount > 0) WriteLine("");
#>
    [StackTraceHidden]
    [DoesNotReturn]
    public static TOut FluentThrow<<#= string.Concat(Enumerable.Range(1, pCount).Select(pNum => $"T{pNum}, ")) #>TOut>
    (
<#
        if (pCount > 0)
        {
#>
        <#= string.Concat(Enumerable.Range(1, pCount).Select(pNum => $"T{pNum} v{pNum}, ")) #>
<#
        }
#>
        Action<#= pCount > 0 ? "<" : "" #><#= string.Join(", ", Enumerable.Range(1, pCount).Select(pNum => $"T{pNum}")) #><#= pCount > 0 ? ">" : "" #> throwAction
    )
    {
        throwAction(<#= string.Join(", ", Enumerable.Range(1, pCount).Select(pNum => $"v{pNum}")) #>);
#if NET7_0_OR_GREATER
        throw new UnreachableException();
#else
        throw new InvalidOperationException();
#endif
    }
<#
    }
#>
}
